user  nginx;
worker_processes  1;
# # Debugging
# error_log /dev/stderr debug;

events {
    worker_connections  1024;
}

http {
  include       mime.types;
  default_type  application/octet-stream;

  keepalive_timeout 65;
  sendfile on;

  large_client_header_buffers 4 32k;
  proxy_buffer_size 32k;
  proxy_buffers 4 32k;

  proxy_cache_path /cache/cache levels=1:2 keys_zone=cache:16m inactive=1y max_size=$PROXY_CACHE_LIMIT use_temp_path=off;
  resolver $PROXY_DNS_RESOLVER valid=30s;

  # this is necessary for us to be able to disable request buffering in all cases
  proxy_http_version 1.1;

  # will run before forking out nginx worker processes
  init_by_lua_block { require "cjson" }

  log_format proxy '${ESC}remote_addr - ${ESC}upstream_cache_status [${ESC}time_local] "${ESC}request" '
                      '${ESC}status ${ESC}body_bytes_sent "${ESC}http_referer" '
                      '"${ESC}http_user_agent" "${ESC}http_x_forwarded_for" '
                      'rt=${ESC}request_time uct="${ESC}upstream_connect_time" uht="${ESC}upstream_header_time" urt="${ESC}upstream_response_time"';

  #https://docs.docker.com/registry/recipes/nginx/#setting-things-up
  map ${ESC}upstream_http_docker_distribution_api_version ${ESC}docker_distribution_api_version {
  '' 'registry/2.0';
  }

  server {
    listen $PROXY_$PROXY_PORT $PROXY_LISTENER_OPTIONS default_server;

    set_by_lua_block ${ESC}auth_headers {
        local f = io.open("$NGINX_CONFIG_DIR/token")
        if not f then
            ngx.log(ngx.ERR, "failed to open token file")
            return nil
        end
        local c = f:read("*all")
        f:close()
        if not c then
            ngx.log(ngx.ERR, "failed to read token file")
            return nil
        end
        return c
    }
    

    $PROXY_LISTENER_INCLUDES

    # Cache
    add_header X-Cache-Status   ${ESC}upstream_cache_status;
    proxy_temp_path /cache/temp 1 2;
    proxy_ignore_headers        Cache-Control;

    # disable any limits to avoid HTTP 413 for large image uploads
    client_max_body_size 0;

    # required to avoid HTTP 411: see Issue #1486 (https://github.com/moby/moby/issues/1486)
    chunked_transfer_encoding on;

    # increases timeouts to avoid HTTP 504
    proxy_connect_timeout  3s;
    proxy_read_timeout     300s;
    proxy_send_timeout     300s;
    send_timeout           300s;

    # disable proxy request buffering
    proxy_request_buffering off;

    add_header 'Docker-Distribution-Api-Version' ${ESC}docker_distribution_api_version always;
    add_header "Access-Control-Allow-Origin" "*";

    # whitelisting
    location / {
      return 401;
    }

    # health check no logging
    location /health {
      access_log off;
      error_log /dev/stderr error;
      return 200;
    }

    # Pass through enabled repositories.
    location ~ ^/v2/$PROXY_NAMESPACE_PATTERN.*  {

      access_log /dev/stdout proxy;

      set ${ESC}url        $PROXY_ECR_ENDPOINT;
      proxy_pass      ${ESC}url;
      proxy_redirect  ${ESC}url $PROXY_LISTENER_SCHEME://${ESC}host:$PROXY_PORT;

      # Add AWS ECR authentication headers
      proxy_set_header  X-Real-IP          ${ESC}remote_addr;
      proxy_set_header  X-Forwarded-For    ${ESC}remote_addr;
      proxy_set_header  X-Forwarded-User   ${ESC}auth_headers;
      proxy_set_header  Authorization      ${ESC}auth_headers;
      proxy_set_header  X-Forwarded-Proto  ${ESC}scheme;
    }

    # Content addressable files like blobs.
    # https://docs.docker.com/registry/spec/api/#blob
    location ~ ^/v2/.*/blobs/[a-z0-9]+:[a-f0-9]+$ {

      access_log /dev/stdout proxy;

      set ${ESC}url        $PROXY_ECR_ENDPOINT;
      proxy_pass      ${ESC}url;
      proxy_redirect  ${ESC}url $PROXY_LISTENER_SCHEME://${ESC}host:$PROXY_PORT;

      # Add AWS ECR authentication headers
      proxy_set_header  X-Real-IP          ${ESC}remote_addr;
      proxy_set_header  X-Forwarded-For    ${ESC}remote_addr;
      proxy_set_header  X-Forwarded-User   ${ESC}auth_headers;
      proxy_set_header  Authorization      ${ESC}auth_headers;
      proxy_set_header  X-Forwarded-Proto  ${ESC}scheme;

      # When accessing image blobs using HTTP GET AWS ECR redirects with
      # s3 buckets uri to download the image. This needs to handled by
      # nginx rather then docker client for caching.
      proxy_intercept_errors    on;
      error_page 301 302 307 =  @handle_redirect;
    }

    # No authentication headers needed as ECR returns s3 uri with details in
    # query params. Also the params should be part of cache key for nginx to
    # issue HIT for same image blob.
    location @handle_redirect {

      access_log /dev/stdout proxy;

      set                    ${ESC}saved_redirect_location '${ESC}upstream_http_location';
      proxy_pass             ${ESC}saved_redirect_location;
      proxy_cache            cache;
      proxy_cache_key        $PROXY_CACHE_KEY;
      proxy_cache_valid      200  1y;
      proxy_cache_use_stale  error timeout invalid_header updating
                             http_500 http_502 http_503 http_504;
      proxy_cache_lock       on;
    }

    location ~ ^/v2/.*/tags/list+$ {
      # get paginated list of tags
      content_by_lua_block {
        local location, tags, cjson = ngx.var.uri, {}, require "cjson"
        while true do
          local res = ngx.location.capture(
            "/get_tags",
            { args = { req_uri = location } }
          )
          if res.status == ngx.HTTP_NOT_FOUND and table.getn(tags) == 0 then
            ngx.status = ngx.HTTP_NOT_FOUND
            ngx.print(res.body)
            ngx.exit(0)
          end
          local data = cjson.decode(res.body)
          for _,v in ipairs(data['tags']) do
            ngx.print(v)
            table.insert(tags, v)
          end
          if res.header["Link"] ~= nil then
            location = res.header["Link"]:match("/v2[^>]+")
          else
            ngx.print(cjson.encode{name = data['name'], tags = tags })
            ngx.exit(ngx.HTTP_OK)
          end
        end
      }
    }

    # Helper location for getting tags from upstream repository
    # used for getting paginated tags.
    location /get_tags {

      access_log /dev/stdout proxy;

      internal;
      set_unescape_uri      ${ESC}req_uri ${ESC}arg_req_uri;
      proxy_pass            $PROXY_ECR_ENDPOINT${ESC}req_uri;

      # Add AWS ECR authentication headers
      proxy_set_header  X-Real-IP          ${ESC}remote_addr;
      proxy_set_header  X-Forwarded-For    ${ESC}remote_addr;
      proxy_set_header  X-Forwarded-User   ${ESC}auth_headers;
      proxy_set_header  Authorization      ${ESC}auth_headers;
      proxy_set_header  X-Forwarded-Proto  ${ESC}scheme;
    }
  }
}
